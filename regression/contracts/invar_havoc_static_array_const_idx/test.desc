CORE
main.c
--apply-loop-contracts
^EXIT=10$
^SIGNAL=0$
^\[main.1\] .* Check loop invariant before entry: SUCCESS$
^\[main.2\] .* Check that loop invariant is preserved: SUCCESS$
^\[main.assertion.1\] .* assertion data\[1\] == 0 \|\| data\[1\] == 1: FAILURE$
^\[main.assertion.2\] .* assertion data\[4\] == 0: SUCCESS$
^VERIFICATION FAILED$
--
--
Test case related to issue #6020: it checks that arrays are correctly havoced
when enforcing loop invariant contracts.
The `data[1] == 0 || data[1] == 1` assertion is expected to fail since `data[1]`
is havoced and the invariant does not reestablish the value of `data[1]`.
However, the `data[4] == 0` assertion is expected to pass -- we should not havoc
the entire `data` array, if only a constant index if being modified.
